function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import Property from '../Property';
import { coordinatesDecoder } from '../helpers';
import { bytesToString } from '../encoding';

var NaviDestinationResponse = function (_PropertyResponse) {
  _inherits(NaviDestinationResponse, _PropertyResponse);

  /**
   * @property {Object} coordinates (object) Coordinates ({ latitude: (double), longitude: (double) })
   * @property {String} destinationName (string) Destination name
   *
   * @example NaviDestinationResponse
    {
      coordinates: {
        latitude: 52.52,
        longitude: 13.42,
      },
      destinationName: 'Narnia',
    }
   */
  function NaviDestinationResponse(data) {
    _classCallCheck(this, NaviDestinationResponse);

    var _this = _possibleConstructorReturn(this, (NaviDestinationResponse.__proto__ || Object.getPrototypeOf(NaviDestinationResponse)).call(this));

    var properties = [new Property(0x07, 'coordinates').setDecoder(coordinatesDecoder), new Property(0x02, 'destinationName').setDecoder(bytesToString)];

    _this.parse(data, properties);
    return _this;
  }

  return NaviDestinationResponse;
}(PropertyResponse);

NaviDestinationResponse.identifier = [0x00, 0x31];
export default NaviDestinationResponse;