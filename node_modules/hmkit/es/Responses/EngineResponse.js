function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import Property from '../Property';
import { switchDecoder } from '../helpers';

var EngineResponse = function (_PropertyResponse) {
  _inherits(EngineResponse, _PropertyResponse);

  /**
   * @property {String} ignition (string) Engine ignition state
   * @property {String} accessoriesIgnition (string) Accessories ignition state
   *
   * @example EngineResponse
    {
      ignition: 'engine_off',
      accessoriesIgnition: 'powered_off'
    }
   */
  function EngineResponse(data) {
    _classCallCheck(this, EngineResponse);

    var _this = _possibleConstructorReturn(this, (EngineResponse.__proto__ || Object.getPrototypeOf(EngineResponse)).call(this));

    var properties = [new Property(0x01, 'ignition').setDecoder(switchDecoder({
      0x00: 'engine_off',
      0x01: 'engine_on'
    })), new Property(0x02, 'accessoriesIgnition').setDecoder(switchDecoder({
      0x00: 'powered_off',
      0x01: 'powered_on'
    }))];

    _this.parse(data, properties);
    return _this;
  }

  return EngineResponse;
}(PropertyResponse);

EngineResponse.identifier = [0x00, 0x35];
export default EngineResponse;