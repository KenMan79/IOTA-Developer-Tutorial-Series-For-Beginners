var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import Property from '../Property';
import OptionalProperty from '../OptionalProperty';
import { switchDecoder, bytesSum } from '../helpers';

var TachographResponse = function (_PropertyResponse) {
  _inherits(TachographResponse, _PropertyResponse);

  /**
   * @property {Array} driverWorkingStates (object) Driver working states ({ driverNumber: (Number), workingState: (String 'resting|driver_available|working|driving') })
   * @property {Array} driverTimeStates (object) Driver time states ({ driverNumber: (Number), timeState: (String 'normal|15_min_before_4|4_reached|15_min_before_9|9_reached|15_min_before_16|16_reached') })
   * @property {Array} driverCards  (object) Driver card states ({ driverNumber: (Number), card: (String 'not_presented|presented') })
   * @property {String} vehicleMotion (string 'not_detected|detected') Vehicle motion detected
   * @property {String} vehicleOverspeed (string 'no_overspeed|overspeed') Overspeed state
   * @property {String} vehicleDirection (string 'forward|reverse') Vehicle direction
   * @property {Number} vehicleSpeed (number) Vehicle speed in km/h
   *
   * @example TachographResponse
    {
      driverWorkingStates: [
        {
          driverNumber: 1,
          workingState: 'resting',
        },
        {
          driverNumber: 2,
          workingState: 'resting',
        },
      ],
      driverTimeStates: [
        {
          driverNumber: 1,
          timeState: 'normal',
        },
        {
          driverNumber: 2,
          timeState: 'normal',
        },
      ],
      driverCards: [
        {
          driverNumber: 1,
          card: 'not_present',
        },
        {
          driverNumber: 2,
          card: 'not_present',
        },
      ],
      vehicleMotion: 'not_detected',
      vehicleOverspeed: 'no_overspeed',
      vehicleDirection: 'forward',
      vehicleSpeed: 0,
    }
  */
  function TachographResponse(data) {
    _classCallCheck(this, TachographResponse);

    var _this = _possibleConstructorReturn(this, (TachographResponse.__proto__ || Object.getPrototypeOf(TachographResponse)).call(this));

    var properties = [new Property(0x01, 'driverWorkingStates').setOptionalSubProperties('driverNumber', [new OptionalProperty(0x01, 1).setDecoder(_this.driverWorkingStateDecoder), new OptionalProperty(0x02, 2).setDecoder(_this.driverWorkingStateDecoder)]), new Property(0x02, 'driverTimeStates').setOptionalSubProperties('driverNumber', [new OptionalProperty(0x01, 1).setDecoder(_this.driverTimeStateDecoder), new OptionalProperty(0x02, 2).setDecoder(_this.driverTimeStateDecoder)]), new Property(0x03, 'driverCards').setOptionalSubProperties('driverNumber', [new OptionalProperty(0x01, 1).setDecoder(_this.driverCardDecoder), new OptionalProperty(0x02, 2).setDecoder(_this.driverCardDecoder)]), new Property(0x04, 'vehicleMotion').setDecoder(switchDecoder({
      0x00: 'not_detected',
      0x01: 'detected'
    })), new Property(0x05, 'vehicleOverspeed').setDecoder(switchDecoder({
      0x00: 'no_overspeed',
      0x01: 'overspeed'
    })), new Property(0x06, 'vehicleDirection').setDecoder(switchDecoder({
      0x00: 'forward',
      0x01: 'reverse'
    })), new Property(0x07, 'vehicleSpeed').setDecoder(bytesSum)];

    _this.parse(data, properties);
    return _this;
  }

  _createClass(TachographResponse, [{
    key: 'driverWorkingStateDecoder',
    value: function driverWorkingStateDecoder(data) {
      return {
        workingState: switchDecoder({
          0x00: 'resting',
          0x01: 'driver_available',
          0x02: 'working',
          0x03: 'driving'
        })(data)
      };
    }
  }, {
    key: 'driverTimeStateDecoder',
    value: function driverTimeStateDecoder(data) {
      return {
        timeState: switchDecoder({
          0x00: 'normal',
          0x01: '15_min_before_4',
          0x02: '4_reached',
          0x03: '15_min_before_9',
          0x04: '9_reached',
          0x05: '15_min_before_16',
          0x06: '16_reached'
        })(data)
      };
    }
  }, {
    key: 'driverCardDecoder',
    value: function driverCardDecoder(data) {
      return {
        card: switchDecoder({
          0x00: 'not_present',
          0x01: 'present'
        })(data)
      };
    }
  }]);

  return TachographResponse;
}(PropertyResponse);

TachographResponse.identifier = [0x00, 0x64];
export default TachographResponse;