var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import Property from '../Property';

var OffroadResponse = function (_PropertyResponse) {
  _inherits(OffroadResponse, _PropertyResponse);

  /**
   * @property {Number} routeIncline (number) Route elevation incline in degrees
   * @property {Number} wheelSuspension (number) Wheel suspension percent
   *
   * @example OffroadResponse
    {
      routeIncline: 0,
      wheelSuspension: 0,
    }
   */
  function OffroadResponse(data) {
    _classCallCheck(this, OffroadResponse);

    var _this = _possibleConstructorReturn(this, (OffroadResponse.__proto__ || Object.getPrototypeOf(OffroadResponse)).call(this));

    var properties = [new Property(0x01, 'routeIncline').setDecoder(_this.routeInclineDecoder), new Property(0x02, 'wheelSuspension')];

    _this.parse(data, properties);
    return _this;
  }

  _createClass(OffroadResponse, [{
    key: 'routeInclineDecoder',
    value: function routeInclineDecoder(bytes) {
      // For some reason, the 'bytesSum' is failing here
      var sum = (bytes[0] << 8) + bytes[1];

      return sum << 16 >> 16;
    }
  }]);

  return OffroadResponse;
}(PropertyResponse);

OffroadResponse.identifier = [0x00, 0x52];
export default OffroadResponse;