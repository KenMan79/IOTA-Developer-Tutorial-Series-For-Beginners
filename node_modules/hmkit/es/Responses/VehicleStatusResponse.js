var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import PropertyResponse from '../PropertyResponse';
import OptionalProperty from '../OptionalProperty';
import Response from './Response';
import CapabilityProperty from '../CapabilityProperty';
import Property from '../Property';
import { bytesSum, getRoundedIeee754ToBase10, switchDecoder } from '../helpers';
import { bytesToString } from '../encoding';
import CAPABILITY_IDENTIFIERS from '../CAPABILITY_IDENTIFIERS';

var VehicleStatusResponse = function (_PropertyResponse) {
  _inherits(VehicleStatusResponse, _PropertyResponse);

  /**
   * @property {String} vin (string) The unique Vehicle Identification Number
   * @property {String} powertrain (string 'unknown|all_electric|combustion_engine|phev|hydrogen|hydrogen_hybrid') Powertrain
   * @property {String} modelName (string) Model name
   * @property {String} name (string) Car's name
   * @property {String} licensePlate (string) License plate
   * @property {String} salesDesignation (string) Sales designation
   * @property {Number} modelYear (number) Model year
   * @property {String} colorName (string) Color name
   * @property {Number} powerInKw (number) Power in kw
   * @property {Number} numberOfDoors (number) Number of doors
   * @property {Number} numberOfSeats (number) Number of seats
   * @property {Number} engineVolume (number) The engine volume displacement in liters
   * @property {Number} engineMaxTorque (number) The maximum engine torque in Nm
   * @property {String} gearbox (string 'manual|automatic|semi_automatic') Gearbox
   * @property {String} displayUnit (string 'km|miles') Display unit
   * @property {String} driverSeatLocation (string 'left|right|center') Driver seat location
   * @property {String} equipments (array) List of equipments
   * @property {String} brand (string) Brand name
   * @property {String} states (array '{capabilityIdentifier: (string), state: (object)}') Capability states
   *
   * @example VehicleStatusResponse
    {
      vin: 'JF2SHBDC7CH451869',
      powertrain: 'all_electric',
      modelName: 'Type X',
      name: 'My Car',
      licensePlate: 'ABC123',
      salesDesignation: 'Package+',
      modelYear: 2017,
      colorName: 'Estoril Blau',
      powerInKw: 220,
      numberOfDoors: 5,
      numberOfSeats: 5,
      engineVolume: 4395,
      engineMaxTorque: 520,
      gearbox: 'semi_automatic',
      displayUnit: 'km',
      driverSeatLocation: 'left',
      equipments: ['side skirts', 'front apron', 'rear apron'],
      brand: 'Mercedes',
      states: [
        {
          capabilityIdentifier: 'trunk',
          state: {
            trunkLock: 'unlocked',
            trunkPosition: 'open',
          },
        },
        {
          capabilityIdentifier: 'rooftop_control',
          state: {
            dimming: 100,
            position: 0,
          },
        },
      ],
    }
   */

  function VehicleStatusResponse(data) {
    _classCallCheck(this, VehicleStatusResponse);

    var _this = _possibleConstructorReturn(this, (VehicleStatusResponse.__proto__ || Object.getPrototypeOf(VehicleStatusResponse)).call(this));

    var properties = [new Property(0x01, 'vin').setDecoder(bytesToString), new Property(0x02, 'powertrain').setDecoder(switchDecoder({
      0x00: 'unknown',
      0x01: 'all_electric',
      0x02: 'combustion_engine',
      0x03: 'phev',
      0x04: 'hydrogen',
      0x05: 'hydrogen_hybrid'
    })), new Property(0x03, 'modelName').setDecoder(bytesToString), new Property(0x04, 'name').setDecoder(bytesToString), new Property(0x05, 'licensePlate').setDecoder(bytesToString), new Property(0x06, 'salesDesignation').setDecoder(bytesToString), new Property(0x07, 'modelYear').setDecoder(bytesSum), new Property(0x08, 'colorName').setDecoder(bytesToString), new Property(0x09, 'powerInKw').setDecoder(bytesSum), new Property(0x0a, 'numberOfDoors').setDecoder(bytesSum), new Property(0x0b, 'numberOfSeats').setDecoder(bytesSum), new Property(0x0c, 'engineVolume').setDecoder(getRoundedIeee754ToBase10(2)), new Property(0x0d, 'engineMaxTorque').setDecoder(bytesSum), new Property(0x0e, 'gearbox').setDecoder(switchDecoder({
      0x00: 'manual',
      0x01: 'automatic',
      0x02: 'semi_automatic'
    })), new Property(0x0f, 'displayUnit').setDecoder(switchDecoder({
      0x00: 'km',
      0x01: 'miles'
    })), new Property(0x10, 'driverSeatLocation').setDecoder(switchDecoder({
      0x00: 'left',
      0x01: 'right',
      0x02: 'center'
    })), new Property(0x11, 'equipments').array().setDecoder(bytesToString), new Property(0x12, 'brand').setDecoder(bytesToString), new CapabilityProperty(0x99, 'states').setOptionalSubProperties('capabilityIdentifier', Object.entries(CAPABILITY_IDENTIFIERS).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          name = _ref2[0],
          identifier = _ref2[1].identifier;

      return new OptionalProperty(identifier, name).setDecoder(_this.getCapabilityStateDecoder(identifier));
    }))];

    _this.parse(data, properties);
    return _this;
  }

  _createClass(VehicleStatusResponse, [{
    key: 'getCapabilityStateDecoder',
    value: function getCapabilityStateDecoder(identifier) {
      return function (bytes) {
        return {
          state: new Response([].concat(_toConsumableArray(identifier), _toConsumableArray(bytes))).parse()
        };
      };
    }
  }]);

  return VehicleStatusResponse;
}(PropertyResponse);

VehicleStatusResponse.identifier = [0x00, 0x11];
export default VehicleStatusResponse;