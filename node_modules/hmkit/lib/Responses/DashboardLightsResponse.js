'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _PropertyResponse2 = require('../PropertyResponse');

var _PropertyResponse3 = _interopRequireDefault(_PropertyResponse2);

var _Property = require('../Property');

var _Property2 = _interopRequireDefault(_Property);

var _OptionalProperty = require('../OptionalProperty');

var _OptionalProperty2 = _interopRequireDefault(_OptionalProperty);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DashboardLightsResponse = function (_PropertyResponse) {
  _inherits(DashboardLightsResponse, _PropertyResponse);

  /**
   * @property {Array} dashboardLights (array) Dashbaord lights ([{lightName: (String), state: (String)}, ...])
   *
   * @example DashboardLightsResponse
    {
      dashboardLights: [
        {
          lightName: 'high_beam',
          state: 'inactive',
        },
        {
          lightName: 'low_beam',
          state: 'inactive',
        },
        {
          lightName: 'hazard_warning',
          state: 'inactive',
        },
        {
          lightName: 'brake_failure',
          state: 'inactive',
        },
        {
          lightName: 'hatch_open',
          state: 'inactive',
        },
        {
          lightName: 'fuel_level',
          state: 'inactive',
        },
        {
          lightName: 'engine_coolant_temperature',
          state: 'inactive',
        },
        {
          lightName: 'battery_charging_condition',
          state: 'inactive',
        },
        {
          lightName: 'engine_oil',
          state: 'inactive',
        },
        {
          lightName: 'position_lights',
          state: 'inactive',
        },
        {
          lightName: 'front_fog_light',
          state: 'inactive',
        },
        {
          lightName: 'rear_fog_light',
          state: 'inactive',
        },
        {
          lightName: 'park_heating',
          state: 'inactive',
        },
        {
          lightName: 'engine_indicator',
          state: 'inactive',
        },
        {
          lightName: 'service_call',
          state: 'inactive',
        },
        {
          lightName: 'transmission_fluid_temperature',
          state: 'inactive',
        },
        {
          lightName: 'transmission_failure',
          state: 'inactive',
        },
        {
          lightName: 'anti_lock_brake_failure',
          state: 'inactive',
        },
        {
          lightName: 'worn_brake_linings',
          state: 'inactive',
        },
        {
          lightName: 'windscreen_washer_fluid',
          state: 'inactive',
        },
        {
          lightName: 'tire_failure',
          state: 'inactive',
        },
        {
          lightName: 'engine_oil_level',
          state: 'inactive',
        },
        {
          lightName: 'engine_coolant_level',
          state: 'inactive',
        },
        {
          lightName: 'steering_failure',
          state: 'inactive',
        },
        {
          lightName: 'esc_indication',
          state: 'inactive',
        },
        {
          lightName: 'brake_lights',
          state: 'inactive',
        },
        {
          lightName: 'adblue_level',
          state: 'inactive',
        },
        {
          lightName: 'fuel_filter_diff_pressure',
          state: 'inactive',
        },
        {
          lightName: 'seat_belt',
          state: 'inactive',
        },
        {
          lightName: 'advanced_braking',
          state: 'inactive',
        },
        {
          lightName: 'acc',
          state: 'inactive',
        },
        {
          lightName: 'trailer_connected',
          state: 'inactive',
        },
        {
          lightName: 'airbag',
          state: 'inactive',
        },
        {
          lightName: 'esc_switched_off',
          state: 'inactive',
        },
        {
          lightName: 'lane_departure_warning_off',
          state: 'inactive',
        },
      ]
    }
   */
  function DashboardLightsResponse(data) {
    _classCallCheck(this, DashboardLightsResponse);

    /* prettier-ignore */
    var _this = _possibleConstructorReturn(this, (DashboardLightsResponse.__proto__ || Object.getPrototypeOf(DashboardLightsResponse)).call(this));

    var properties = [new _Property2.default(0x01, 'dashboardLights').setOptionalSubProperties('lightName', [new _OptionalProperty2.default(0x00, 'high_beam').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x01, 'low_beam').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x02, 'hazard_warning').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x03, 'brake_failure').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x04, 'hatch_open').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x05, 'fuel_level').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x06, 'engine_coolant_temperature').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x07, 'battery_charging_condition').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x08, 'engine_oil').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x09, 'position_lights').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x0A, 'front_fog_light').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x0B, 'rear_fog_light').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x0C, 'park_heating').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x0D, 'engine_indicator').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x0E, 'service_call').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x0F, 'transmission_fluid_temperature').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x10, 'transmission_failure').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x11, 'anti_lock_brake_failure').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x12, 'worn_brake_linings').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x13, 'windscreen_washer_fluid').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x14, 'tire_failure').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x15, 'engine_oil_level').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x16, 'engine_coolant_level').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x17, 'steering_failure').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x18, 'esc_indication').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x19, 'brake_lights').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x1A, 'adblue_level').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x1B, 'fuel_filter_diff_pressure').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x1C, 'seat_belt').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x1D, 'advanced_braking').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x1E, 'acc').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x1F, 'trailer_connected').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x20, 'airbag').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x21, 'esc_switched_off').setDecoder(_this.lightStateDecoder), new _OptionalProperty2.default(0x22, 'lane_departure_warning_off').setDecoder(_this.lightStateDecoder)])];
    /* prettier-ignore-end */
    _this.parse(data, properties);
    return _this;
  }

  _createClass(DashboardLightsResponse, [{
    key: 'lightStateDecoder',
    value: function lightStateDecoder(data) {
      return {
        state: (0, _helpers.switchDecoder)({
          0x00: 'inactive',
          0x01: 'info',
          0x02: 'yellow',
          0x03: 'red'
        })(data)
      };
    }
  }]);

  return DashboardLightsResponse;
}(_PropertyResponse3.default);

DashboardLightsResponse.identifier = [0x00, 0x61];
exports.default = DashboardLightsResponse;