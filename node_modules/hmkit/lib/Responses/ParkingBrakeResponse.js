'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _PropertyResponse2 = require('../PropertyResponse');

var _PropertyResponse3 = _interopRequireDefault(_PropertyResponse2);

var _Property = require('../Property');

var _Property2 = _interopRequireDefault(_Property);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ParkingBrakeResponse = function (_PropertyResponse) {
  _inherits(ParkingBrakeResponse, _PropertyResponse);

  /**
   * @property {String} parkingBrake (string 'active|inactive') Parking brake
   *
   * @example ParkingBrakeResponse
    {
      parkingBrake: 'inactive',
    }
   */
  function ParkingBrakeResponse(data) {
    _classCallCheck(this, ParkingBrakeResponse);

    var _this = _possibleConstructorReturn(this, (ParkingBrakeResponse.__proto__ || Object.getPrototypeOf(ParkingBrakeResponse)).call(this));

    var properties = [new _Property2.default(0x01, 'parkingBrake').setDecoder((0, _helpers.activeInactiveDecoder)())];

    _this.parse(data, properties);
    return _this;
  }

  return ParkingBrakeResponse;
}(_PropertyResponse3.default);

ParkingBrakeResponse.identifier = [0x00, 0x58];
exports.default = ParkingBrakeResponse;