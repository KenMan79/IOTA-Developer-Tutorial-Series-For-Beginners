'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _PropertyResponse2 = require('../PropertyResponse');

var _PropertyResponse3 = _interopRequireDefault(_PropertyResponse2);

var _Property = require('../Property');

var _Property2 = _interopRequireDefault(_Property);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RooftopControlResponse = function (_PropertyResponse) {
  _inherits(RooftopControlResponse, _PropertyResponse);

  /**
   * @property {Number} dimming (number) Percentage value between 0-100 whereas 100 is opaque
   * @property {Number} position (number) Percentage value between 0-100 whereas 100 is fully open
   * @property {String} convertibleRoof (string 'closed | open | emergency_locked | closed_secured | open_secured | hard_top_mounted | intermediate_position | loading_position | loading_position_immediate') Convertible roof state
   * @property {String} sunroofTilt (string 'closed|tilted|half_tilted') Sunroof tilt state
   * @property {String} sunroofState (string 'closed|open|intermediate') Sunroof state
   *
   * @example RooftopControlResponse
    {
      dimming: 23,
      position: 34,
      convertibleRoof: 'closed',
      sunroofTilt: 'closed',
      sunroofState: 'open'
    }
   */
  function RooftopControlResponse(data) {
    _classCallCheck(this, RooftopControlResponse);

    var _this = _possibleConstructorReturn(this, (RooftopControlResponse.__proto__ || Object.getPrototypeOf(RooftopControlResponse)).call(this));

    var properties = [new _Property2.default(0x01, 'dimming'), new _Property2.default(0x02, 'position'), new _Property2.default(0x03, 'convertibleRoof').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'closed',
      0x01: 'open',
      0x02: 'emergency_locked',
      0x03: 'closed_secured',
      0x04: 'open_secured',
      0x05: 'hard_top_mounted',
      0x06: 'intermediate_position',
      0x07: 'loading_position',
      0x08: 'loading_position_immediate'
    })), new _Property2.default(0x04, 'sunroofTilt').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'closed',
      0x01: 'tilted',
      0x02: 'half_tilted'
    })), new _Property2.default(0x05, 'sunroofState').setDecoder((0, _helpers.switchDecoder)({
      0x00: 'closed',
      0x01: 'open',
      0x02: 'intermediate'
    }))];

    _this.parse(data, properties);
    return _this;
  }

  return RooftopControlResponse;
}(_PropertyResponse3.default);

RooftopControlResponse.identifier = [0x00, 0x25];
exports.default = RooftopControlResponse;